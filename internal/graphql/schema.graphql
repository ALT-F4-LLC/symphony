scalar Time

type LogicalVolumeMetadata {
  LvName: String!
  VgName: String!
  LvAttr: String!
  LvSize: String!
  PoolLv: String!
  Origin: String!
  DataPercent: String!
  MetadataPercent: String!
  MovePv: String!
  MirrorLog: String!
  CopyPercent: String!
  ConvertLv: String!
}

type LogicalVolume {
  created_at: Time!
  updated_at: Time!
  id: ID!
  size: Int!
  metadata: LogicalVolumeMetadata
  volumeGroup: VolumeGroup!
  service: Service!
}

type PhysicalVolumeMetadata {
  PvName: String!
  VgName: String!
  PvFmt: String!
  PvAttr: String!
  PvSize: String!
  PvFree: String!
}

type PhysicalVolume {
  created_at: Time!
  updated_at: Time!
  id: ID!
  device: String!
  metadata: PhysicalVolumeMetadata
  service: Service!
}

type RemoveStatus {
  success: Boolean!
}

type ServiceType {
  id: ID!
  name: String!
}

type Service {
  created_at: Time!
  updated_at: Time!
  id: ID!
  hostname: String!
  serviceType: ServiceType!
}

type VolumeGroupMetadata {
  VgName: String!
  PvCount: String!
  LvCount: String!
  SnapCount: String!
  VgAttr: String!
  VgSize: String!
  VgFree: String!
}

type VolumeGroup {
  created_at: Time!
  updated_at: Time!
  id: ID!
  metadata: VolumeGroupMetadata
  physicalVolume: PhysicalVolume!
  service: Service!
}

type Query {
  logicalVolume(id: ID!): LogicalVolume
  logicalVolumes: [LogicalVolume!]!
  physicalVolume(id: ID!): PhysicalVolume
  physicalVolumes: [PhysicalVolume!]!
  service(id: ID!): Service
  services: [Service!]!
  serviceTypes: [ServiceType!]!
  volumeGroup(id: ID!): VolumeGroup
  volumeGroups: [VolumeGroup!]!
}

type Mutation {
  newLogicalVolume(size: String!): LogicalVolume!
  newPhysicalVolume(device: String!, serviceID: ID!): PhysicalVolume!
  newVolumeGroup(physicalVolumeID: ID!): VolumeGroup!
  removeLogicalVolume(id: ID!): RemoveStatus!
  removePhysicalVolume(id: ID!): RemoveStatus!
  removeVolumeGroup(id: ID!): RemoveStatus!
}
